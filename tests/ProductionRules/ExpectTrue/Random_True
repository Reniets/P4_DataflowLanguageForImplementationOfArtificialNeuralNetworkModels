// Test of legal char sequences
block random_01 {
	channel:in input;
	channel:out output;
	
	blueprint() {
		block a = build test();;;;;;;;;
		;;;
		;;;;;;
		;;;
		
		;;;this.input -> a -> this.output;;;;
	}
}

// Test of legal char sequences
block random_02 {
	channel:in input;
	channel:out output;
	
	blueprint() {
		abcde();
	}
	
	procedure abc() {}
	
	procedure abcd() {
	;;;
	}
	
	procedure abcde() {
		;;;
		abc();
	}
}

// Test of legal but ugly syntax.
block chain_01 {
    channel:in input;
    channel:out output;
    
    blueprint() {
        block a = build test();
        block b = build test();
        block c = build test();
        
        this.input
        -> 
        a
        -> 
        b
        -> 
        c
        -> 
        this.output;
    }
}

// Test of legal but ugly syntax.
block chain_02 {
    channel:in input
	;
    channel:out output
	;
    
    blueprint() {
        block a = build test()											;
			block b = build test()									;
				block c = build test()							;
					block d = build test()					;
						block e = build test()			;
							block f = build test()	;
						block g = build test()			;
					block h = build test()					;
				block i = build test()							;
			block j = build test()									;
		this.input 
		
			->
		
             a
           ->  b 
         ->  c  -> 
       d -> e -> f ->
     g -> h  ->  i -> j
	 
			->
		this.output
			;
    }
}

// Single out channel
block random {
    channel:out output;

    blueprint() {

    }
}

