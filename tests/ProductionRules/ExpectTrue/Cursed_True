// Test of legal but cursed sequences
block cursed_01 {
channel:in
input;channel:out output;
blueprint
(
)
{
block
a
=
build
test
(
)
;
this
.
input
->
a
->
this
.
output
;}
}

block cursed_02{
	channel:in in1																																						;
	channel:in in2;
	channel:in in3;
	channel:in in4;
	channel:in in5;
	channel:in in6;
	channel:out out;
	
	blueprint(){
		(in1, build Source([13,4])) -> operation add1 = build Add()																									;
		(in2, build Source([13,4])) -> operation add2 = build Add()																									;
		(in3, build Source([13,4])) -> operation add3 = build Add()																									;
		(in4, build Source([13,4])) -> operation add4 = build Add()																									;
		(in5, build Source([13,4])) -> operation add5 = build Add()																									;
		(in6, build Source([13,4])) -> operation add6 = build Add()																									;
		
		(add1, add2, add3, add4, add5, add6) -> build Add() -> this										.										output				;
	}
}


block cursed_03{channel:in in1;channel:in in2;channel:in in3;channel:in in4;channel:in in5;channel:in in6;channel:out out;blueprint(){(in1,build Source([13,4]))->operation add1=build Add();(in2, build Source([13,4]))->operation add2=build Add();(in3,build Source([13,4]))->operation add3=build Add();(in4,build Source([13,4]))->operation add4=build Add();(in5,build Source([13,4]))->operation add5=build Add();(in6,build Source([13,4]))->operation add6=build Add();(add1,add2,add3,add4,add5,add6)->build Add()->this.output;}}


 block cursed_04{
     channel:out output;

     blueprint() {
         size a = [2,3];
         size b =
         [
         2
         ,
         3
         ]
         ;
         size c = [1234567890,0987654321];
     }
 }


block cursed_05{
    channel:out output;

    blueprint() {
        block abc = build Test();
        channel:in a = abc.sizzle;
        channel:in k = abc.shizzle;

        size qq = [2,3];
        source bb = build Source(qq) -> a;
        source jj = build Source(qq) -> build Transpose() -> k;
        abc.benis -> output;
    }
}

block cursed_06{
    channel:out output;

    blueprint() {
        block abc = build Test();
        channel:in a = abc.go;

        source bb = build Source(size qq = [2,3]) -> a;
        abc.benis -> output;
    }
}





