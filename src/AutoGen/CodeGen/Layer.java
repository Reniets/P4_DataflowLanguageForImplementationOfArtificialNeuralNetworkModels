/* The following code was generated by The Language Compiler 1.0.0 */

package AutoGen.CodeGen;

import CodeGeneration.DataFlow.Network.Nodes.Block;
import CodeGeneration.DataFlow.Network.Nodes.Blocks.AbstractBlock;
import CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operation;
import CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operations.BinaryOperations.MatrixOperations.Multiplication;
import CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operations.BinaryOperations.UnitWiseOperations._Addition;
import CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operations.NullaryOperation.Source;
import CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operations.UnaryOperations.UnitWiseOperations._Sigmoid;
import CodeGeneration.DataFlow.Network.Nodes.SignalNodes.Channels.ListChannel;
import DataStructures.Pair;

public class Layer extends AbstractBlock {

    public Layer(int a) {
        this.blueprint(a);
    }

    private void blueprint(int a) {
        try {
            this.addNewInputLabel("in", new ListChannel());
            this.addNewOutputLabel("out", new ListChannel());
            Source weights;
            weights = new Source(new Pair<Integer, Integer>(1, 1));
            Source bias;
            bias = new Source(new Pair<Integer, Integer>(1, 1));
            Operation mult;
            mult = new Multiplication();
            mult.receiveGroupConnection(this.getChannel("in"), weights);
            Block __Addition_514727072;
            __Addition_514727072 = new _Addition();
            Block __Sigmoid_311015504;
            __Sigmoid_311015504 = new _Sigmoid();
            __Addition_514727072.receiveGroupConnection(mult, bias);
            __Sigmoid_311015504.receiveGroupConnection(__Addition_514727072);
            __Sigmoid_311015504.connectTo(this.getChannel("out"));

        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}