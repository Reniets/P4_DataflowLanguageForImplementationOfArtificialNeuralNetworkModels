package CodeGeneration.Building;

import CodeGeneration.Building.CodeScopes.SimpleCodeScope;

import java.util.ArrayList;
import java.util.List;

public class BlockClass {

    // Fields:
    private String className;
    private String classPackage;

    private List<String> imports = this.getDefaultImports();
    private CodeScope blueprint = new SimpleCodeScope("blueprint");
    private List<CodeScope> procedures = new ArrayList<>();

    // Constant:
    private static final String AUTOGEN_MESSAGE = "/* The following code was generated by The Language Compiler 1.0.0 */\n\n";

    // Constructor:
    public BlockClass(String className, String classPackage) {
        this.className = className;
        this.classPackage = classPackage;
    }

    public String getClassName() {
        return className;
    }

    public CodeScope getBlueprint() {
        return blueprint;
    }

    public void addProcedure(CodeScope procedure) {
        this.procedures.add(procedure);
    }

    public void addImport(String fullImport) {
        this.imports.add(fullImport);
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder(AUTOGEN_MESSAGE);

        // Append package
        builder.append("package ")
                .append(this.classPackage)
                .append(";\n\n");

        // Append imports
        if (this.imports.size() != 0) {
            for (String imp : this.imports) {
                builder.append("import ")
                        .append(imp)
                        .append(";\n");
            }

            builder.append("\n");
        }

        // Start class
        builder.append("public class ")
                .append(this.className)
                .append(" extends AbstractBlock")
                .append(" {\n\n");

        // Start constructor
        builder.append("public ")
                .append(this.className)
                .append(this.blueprint.getParameters()) // Parameters
                .append(" {\n")                         // Start of content
                .append("this.blueprint")               // Start of call to blueprint
                .append(this.blueprint.getParameters().toCallParameters()) // Call params
                .append(";")                            // End of call to blueprint
                .append("}\n\n");                       // End of constructor

        // Append the blueprint function
        builder.append(this.blueprint);

        // Append all procedure functions
        for (CodeScope procedure : this.procedures) {
            builder.append(procedure)
                    .append("\n\n");
        }

        // End class
        builder.append("}");

        // Return
        return builder.toString();
    }

    private List<String> getDefaultImports() {
        List<String> imports = new ArrayList<>();

        // Blocks
        imports.add("CodeGeneration.DataFlow.Network.Nodes.Block");
        imports.add("CodeGeneration.DataFlow.Network.Nodes.Blocks.AbstractBlock");

        // Channels
        imports.add("CodeGeneration.DataFlow.Network.Nodes.SignalNodes.Channel");
        imports.add("CodeGeneration.DataFlow.Network.Nodes.SignalNodes.Channels.ListChannel");

        // Operations
        imports.add("CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operation");

        // NullaryOperations
        imports.add("CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operations.NullaryOperation.Source");

        // Unary operations
        imports.add("CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operations.UnaryOperations.UnitWiseOperations._Tanh");
        imports.add("CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operations.UnaryOperations.UnitWiseOperations._Sigmoid");
        imports.add("CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operations.UnaryOperations.UnitWiseOperations._Relu");
        imports.add("CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operations.UnaryOperations.MatrixOperations.Transpose");

        // Binary operations
        imports.add("CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operations.BinaryOperations.UnitWiseOperations._Multiplication");
        imports.add("CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operations.BinaryOperations.UnitWiseOperations._Division");
        imports.add("CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operations.BinaryOperations.UnitWiseOperations._Subtraction");
        imports.add("CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operations.BinaryOperations.UnitWiseOperations._Addition");
        imports.add("CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operations.BinaryOperations.MatrixOperations.Multiplication");
        imports.add("CodeGeneration.DataFlow.Network.Nodes.BlocksAndSignalNodes.Operations.BinaryOperations.MatrixOperations.Multiplication");

        // Other
        imports.add("DataStructures.Pair");

        return imports;
    }
}
