import AST.*;
import AST.Nodes.AbstractNodes.*;
import AST.Nodes.AbstractNodes.Nodes.*;
import AST.Nodes.AbstractNodes.Nodes.AbstractNodes.*;
import AST.Nodes.AbstractNodes.Nodes.AbstractNodes.NumberedNodes.*;
import AST.Nodes.AbstractNodes.Nodes.AbstractNodes.NumberedNodes.NamedNodes.*;
import AST.Nodes.NodeClasses.NamedNodes.*;
import AST.Nodes.NodeClasses.NamedNodes.NamedIdNodes.*;
import AST.Nodes.SpecialNodes.*;
import AST.Enums.*;
import AST.TreeWalks.*;
import CompilerExceptions.*;
import java.io.*;
import java_cup.runtime.*;
import java.util.*;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;

parser code {:
        private AbstractNode rootNode;

        public AbstractNode createRootNode() {
            this.rootNode = new RootNode();
            return this.rootNode;
        }

        public AbstractNode getRootNode() {
            return this.rootNode;
        }

        /*
        public void syntax_error(Symbol cur_token){
            if (!MainParse.isTest) {
                super.syntax_error(cur_token);
            }
        }
        */

        // ##### IMPORTANT IMPLEMENTATION - THE "SyntaxAnalysisException" CLASS IS USED IN TESTING!!! #####
        public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
            try {
                // Call original method implementation
                super.unrecovered_syntax_error(cur_token);
            } catch (Exception e) {
                // Rethrow exception as a SyntaxAnalysisException instead of a generic "Exception", to identify in testing.
                throw new CompilerExceptions.SyntaxExceptions.SyntaxAnalysisException(e);
            }
        }

        public static void newScope(){
    	    typenames.push(new HashSet<String>());
        }

        public static void deleteScope(){
    	    typenames.pop();
        }

        public static boolean lookupType(String name){
            for (HashSet<String> scope: typenames)
                if (scope.contains(name)) return true;
            return false;
        }

        public static void addType(String name){
    	    typenames.peek().add(name);
        }

        public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();

        public Parser(Lexer lex, ComplexSymbolFactory sf) {
    	    super(lex,sf);
        }

:};

/* separators */
terminal Symbol COMMA, SEMICOLON, RPAR, LCURLY, RCURLY, RSQR, DOT;

/* keywords */
terminal String CHANNELIN, CHANNELOUT, MYCHANNELIN, MYCHANNELOUT;

/* others */
terminal String ID, BLOCK, DRAW, THIS, CONNECTION, ASSIGN, SOURCE, OPERATION, PROCEDURE, SIZE, BLUEPRINT, BUILD, LSQR, LPAR;
terminal Double NUMCONST;
terminal Integer INTCONST;

non terminal AbstractNode block, blocks, prog, type, buildtype, bluetype, channel, blueparam, blueparams,
             blueextparams, statement, declaration, declstoporstay, optidstatement, optlparstatement, optthisstatement,
             chain, elementliststart, procedurecall, element, groupcon, dotid, elementpar, chainext, parchain,
             elementlist, elementlistext, elementext, pparams, pextparams, parclosestatement, builddeclaration,
             buildelement, buildelementpar, sizepar, inchanneldeclaration, outchanneldeclaration, inoutchanneldeclaration,
             nodedeclaration, nonnodedeclaration, nodeelement, nonnodeelement, nodeelementpar, blueprintassign, sizeassign,
             channelassign, buildassign, blueprintassignopt, sizeassignopt, channelassignopt, buildassignopt, channelelementspar,
             channelelement, idpar, mychannel, mychannelelement, mychannelassignopt, mychannelassign, mychannelelementspar,
             nonnodedeclarationopt, nodedeclarationopt, nodeselectors, nonnodeelementpar;

non terminal AbstractNode blueprint, content, procedures, definition, channeldeclarations;

non terminal SizeNode sizeconst;

//precedence left CONNECTION;
//precedence right ASSIGN;
//precedence left DOT;
//precedence left LPAR, RPAR, LSQR, RSQR;

/* The grammar rules */
start with prog;

prog                    ::= blocks:bs
                        {:
                            AbstractNode prog = createRootNode().adoptChildren(bs);
                        :}
                        ;

// BLOCK
block 			        ::= BLOCK ID:ident LCURLY definition:def RCURLY
                        {:
                            RESULT = new BlockNode(ident, identxleft).adoptChildren(def);
                        :}
                        ;

blocks                  ::= block:b
                        {: RESULT = b; :}
                        | block:b blocks:bs
                        {: RESULT = b.makeSibling(bs); :}
                        ;

definition 		        ::= channeldeclarations:gds blueprint:bp procedures:pds
                        {:
                            RESULT = (pds != null) ? gds.makeSibling(bp).makeSibling(pds) : gds.makeSibling(bp);
                        :}
                        ;

// GENERAL
type				    ::= buildtype:type
                        {: RESULT = type; :}
					    | bluetype:type
					    {: RESULT = type; :}
					    | channel:channel
					    {: RESULT = channel; :}
					    | mychannel:channel
                        {: RESULT = channel; :}
                        ;
buildtype			    ::= BLOCK:b
                        {: RESULT = new BlockTypeNode("NoIden", bxleft); :}
					    | OPERATION:o
					    {: RESULT = new OperationTypeNode("NoIden", oxleft); :}
					    | SOURCE:s
					    {: RESULT = new SourceTypeNode("NoIden", sxleft); :}
                        ;
// CHANNELS
channeldeclarations        ::= inchanneldeclaration:ind outchanneldeclaration:outd inoutchanneldeclaration:inoutd
                        {:
                            RESULT = new ChannelDeclarationsNode(indxleft).adoptChildren(ind, outd, inoutd);
                        :}
                        ;
inchanneldeclaration       ::= MYCHANNELIN ID:id SEMICOLON inchanneldeclaration:ind
                        {:
                        AbstractNode channelNode = new MyInChannelNode(id, idxleft);
                        RESULT = (ind!=null) ? channelNode.makeSibling(ind) : channelNode;
                        :}
                        |
                        ;
outchanneldeclaration      ::= MYCHANNELOUT ID:id SEMICOLON
                        {: RESULT = new MyOutChannelNode(id, idxleft); :}
                        ;
inoutchanneldeclaration    ::= mychannel:g ID:id SEMICOLON inoutchanneldeclaration:gd
                        {:
                           AbstractNode channelNode = ((NamedIdNode) g).setId(id);
                           RESULT = (gd != null) ? channelNode.makeSibling(gd) :  channelNode; :}
					    |
					    ;
mychannel               ::= MYCHANNELIN:i
                        {: RESULT = new MyInChannelNode("NoIden", ixleft); :}
                        | MYCHANNELOUT:o
                        {: RESULT = new MyOutChannelNode("NoIden", oxleft); :}
                        ;

channel				    ::= CHANNELIN:i
                        {: RESULT = new InChannelTypeNode("NoIden", ixleft); :}
					    | CHANNELOUT:o
					    {: RESULT = new OutChannelTypeNode("NoIden", oxleft); :}
                        ;
// BLUEPRINT
blueprint			    ::= BLUEPRINT:b LPAR blueparams:bps RPAR LCURLY content:cnt RCURLY
                        {:
                           AbstractNode blueprintNode = new BlueprintNode(bxleft);
                           if (bps != null) {
                                blueprintNode.adoptChildren(bps);
                           }
                           if (cnt != null) {
                               blueprintNode.adoptChildren(cnt);
                           }
                           RESULT = blueprintNode;
                        :}
                        ;
blueparams		        ::= blueparam:bp
                        {: RESULT = ((new ParamsNode(bpxleft)).adoptChildren(bp)); :}
					    |
                        ;
blueparam			    ::= bluetype:bt ID:id blueextparams:btx
                        {:
                           AbstractNode typeNode = ((NamedIdNode) bt).setId(id);
                           RESULT = (btx != null) ? (typeNode.makeSibling(btx)) : (typeNode);
                        :}
                        ;
blueextparams		    ::= COMMA blueparam:bp
                        {: RESULT = bp;:}
                        |
                        ;

bluetype 			    ::= BLUEPRINT:b
                        {: RESULT = new BlueprintTypeNode("NoIden", bxleft); :}
                        | SIZE:s
                        {: RESULT = new SizeTypeNode("NoIden", sxleft); :}
                        ;
// CONTENT
content			        ::= statement:st SEMICOLON content:ct
                        {:
                           RESULT = (st != null && ct != null) ? st.makeSibling(ct) : ((st != null) ? (st) : (ct)); :}
					    |
                        ;

statement			    ::= declaration:decl
                        {: RESULT = decl; :}
					    | ID:id optidstatement:st
					    {:
					        // Chain
					        if (st instanceof StorageNode) {
					            StorageNode storageNode = (StorageNode) st;
					            String storageName = storageNode.getName();

					            if ("Chain".equals(storageName)) {
					                AbstractNode dotId = storageNode.getNodes()[0];
					                AbstractNode chainNode = storageNode.getNodes()[1];
                                    AbstractNode idSelector = new SelectorNode(id, idxleft);

                                    idSelector.adoptChildren(dotId);

                                    RESULT = chainNode.adoptAsFirstChild(idSelector);
					            } else if ("Assign".equals(storageName)) {
					                AbstractNode assignNode = storageNode.getNodes()[0].adoptAsFirstChild(new SelectorNode(id, idxleft));
					                AbstractNode chainNode = storageNode.getNodes()[1];

					                RESULT = (chainNode != null) ? chainNode.adoptAsFirstChild(assignNode) : assignNode;

					            } else {
					                // Security check, should never happen - But helps with development.
					                throw new RuntimeException("No such name case");
					            }
					        } else {
					            RESULT = st.adoptChildren(new SelectorNode(id, idxleft));
					        }
					    :}
					    | LPAR optlparstatement:statement
					    {: RESULT = statement; :}
					    | THIS:t DOT ID:id optthisstatement:st
					    {: RESULT = st.adoptAsFirstChild(new SelectorNode("this", txleft).adoptChildren(new SelectorNode(id, idxleft))); :}
					    | builddeclaration:bdecl chain:chain
					    {: RESULT = chain.adoptAsFirstChild(bdecl); :}
                        |
                        ;

procedurecall		    ::= LPAR:l elementliststart:paras RPAR
                        {:
                            AbstractNode procedure = new ProcedureCallNode(lxleft);

                            if (paras != null) {
                                procedure.adoptChildren((new ParamsNode(parasxleft)).adoptChildren(paras));
                            }

                            RESULT = procedure;
                        :}
                        ;

// OPTION SELECT FOR STATEMENTS
optlparstatement	    ::= LPAR element:elem RPAR groupcon:groupcon
					    {:
					        // Group connection
                            AbstractNode group = ((StorageNode) groupcon).getNodes()[0];
                            AbstractNode chain = ((StorageNode) groupcon).getNodes()[1];

                            group.adoptAsFirstChild(elem);

                            RESULT = chain;
					     :}
					    | element:elem parclosestatement:chainorgroup
					    {:
					        // Group connection
    					    if (chainorgroup instanceof StorageNode) {
    					        AbstractNode group = ((StorageNode) chainorgroup).getNodes()[0];
                                AbstractNode chain = ((StorageNode) chainorgroup).getNodes()[1];

    					        group.adoptAsFirstChild(elem);

    					        RESULT = chain;
    					    } else {
    					        RESULT = chainorgroup.adoptAsFirstChild(elem);
    					    }
					     :}
                        ;
parclosestatement	    ::= parchain:chain
                        {: RESULT = chain; :}
					    | groupcon:group
					    {: RESULT = group; :}
                        ;
optidstatement	        ::= dotid:did chain:c
                        {: RESULT = new StorageNode("Chain", did, c); :}
					    | procedurecall:pdc
					    {: RESULT = pdc; :}
					    | ASSIGN:a elementpar:elem declstoporstay:chain
					    {: RESULT = new StorageNode("Assign", new AssignNode(axleft).adoptChildren(elem), chain); :}
                        ;
optthisstatement	    ::= procedurecall:pdc
                        {: RESULT = pdc; :}
                        | chain:chain
                        {: RESULT = chain; :}
                        ;
// COLLECTIVE STATEMENTS
chain				    ::= CONNECTION:c nodeelementpar:elem chainext:next
                        {:
                            RESULT = (next != null) ? next.adoptAsFirstChild(elem) : new ChainNode(cxleft).adoptChildren(elem);
                         :}
                        ;
parchain			    ::= RPAR chain:chain
                        {: RESULT = chain; :}
                        ;
chainext			    ::= chain:chain
                        {: RESULT = chain; :}
					    |
                        ;
groupcon			    ::= elementlist:elemlist RPAR CONNECTION:c elementpar:elem chainext:chain
                        {:
                            AbstractNode group = new GroupNode(elemlistxleft).adoptChildren(elemlist);

                            if (chain != null) {
                                group.makeSibling(elem);
                                chain.adoptAsFirstChild(group);
                                RESULT = new StorageNode(group, chain);
                            } else {
                                AbstractNode conn = new ChainNode(cxleft).adoptChildren(group, elem);
                                RESULT = new StorageNode(group, conn);
                            }
                        :}
                        ;
// ELEMENTS
element			        ::= nodeelement:elem
					    {: RESULT = elem; :}
					    | nonnodeelement:elem
					    {: RESULT = elem; :}
					    | nonnodedeclaration:elem
					    {: RESULT = elem; :}
                        ;

nodeelement             ::= nodedeclaration:elem
                        {: RESULT = elem; :}
                        | ID:id dotid:did
                        {: RESULT = (new SelectorNode(id, idxleft)).adoptChildren(did); :}
                        | ID:id ASSIGN:a nodeselectors:elem
                        {: RESULT = new AssignNode(axleft).adoptChildren(new SelectorNode(id, idxleft)).adoptChildren(elem); :}
                        | THIS:t DOT ID:id
                        {: RESULT = new SelectorNode("this", txleft).adoptChildren(new SelectorNode(id, idxleft)); :}
                        | builddeclaration:build
                        {: RESULT = build; :}
                        ;

nonnodeelement          ::= DRAW:d ID:id
                        {: RESULT = new DrawNode(id, dxleft); :}
                        | sizeconst:sc
                        {: RESULT = sc; :}
                        ;

nodeselectors           ::= ID:id1 DOT ID:id2
                        {: RESULT = new SelectorNode(id1, id1xleft).adoptChildren(new SelectorNode(id2, id2xleft)); :}
                        | THIS:t DOT ID:id
                        {: RESULT = new SelectorNode("this", txleft).adoptChildren(new SelectorNode(id, idxleft)); :}
                        | builddeclaration:decla
                        {: RESULT = decla; :}
                        | ID:id
                        {: RESULT = new SelectorNode(id, idxleft); :}
                        ;

buildelementpar		    ::= buildelement:build
                        {: RESULT = build; :}
					    | LPAR buildelement:belem RPAR
					    {: RESULT = belem; :}
					    ;
buildelement		    ::= builddeclaration:build
                        {: RESULT = build; :}
					    | ID:id
                        {: RESULT = new SelectorNode(id, idxleft); :}
					    ;
dotid				    ::= DOT ID:id
                        {: RESULT = new SelectorNode(id, idxleft); :}
					    |
                        ;
elementpar		        ::= LPAR element:elem RPAR
                        {: RESULT = elem; :}
					    | element:elem
					    {: RESULT = elem; :}
                        ;

nodeelementpar          ::= LPAR nodeelement:elem RPAR
                        {: RESULT = elem; :}
                        | nodeelement:elem
                        {: RESULT = elem; :}
                        ;

nonnodeelementpar       ::= LPAR nonnodeelement:elem RPAR
                        {: RESULT = elem; :}
                        | nonnodeelement:elem
                        {: RESULT = elem; :}
                        ;

sizepar                 ::= sizeconst:size
                        {: RESULT = size; :}
                        | LPAR sizeconst:size RPAR
                        {: RESULT = size; :}
                        ;

sizeconst               ::= LSQR:s INTCONST:n1 COMMA INTCONST:n2 RSQR
                        {: RESULT = new SizeNode(n1, n2, sxleft); :}
                        ;

channelelementspar      ::= LPAR channelelement:elem RPAR
                        {: RESULT = elem; :}
                        | channelelement:elem
                        {: RESULT = elem; :}
                        ;

channelelement          ::= ID:id dotid:dotid
                        {: RESULT = new SelectorNode(id, idxleft).adoptChildren(dotid); :}
                        ;

mychannelelementspar    ::= LPAR mychannelelement:elem RPAR
                        {: RESULT = elem; :}
                        | mychannelelement:elem
                        {: RESULT = elem; :}
                        ;

mychannelelement        ::= THIS:t DOT ID:id
                        {: RESULT = new SelectorNode("this", txleft).adoptChildren(new SelectorNode(id, idxleft)); :}
                        | ID:id
                        {: RESULT = new SelectorNode(id, idxleft); :}
                        ;

idpar                   ::= LPAR ID:id RPAR
                        {: RESULT = new SelectorNode(id, idxleft); :}
                        | ID:id
                        {: RESULT = new SelectorNode(id, idxleft); :}
                        ;

// DECLARATION ELEMENT
nodedeclaration         ::= buildtype:type ID:id buildassign:assign
                        {: RESULT = assign.adoptAsFirstChild(((NamedIdNode) type).setId(id)); :}
                        | channel:type ID:id channelassign:assign
                        {: RESULT = assign.adoptAsFirstChild(((NamedIdNode) type).setId(id)); :}
                        | mychannel:type ID:id mychannelassign:assign
                        {: RESULT = assign.adoptAsFirstChild(((NamedIdNode) type).setId(id)); :}
                        ;

nonnodedeclaration      ::= BLUEPRINT ID:id blueprintassign:assign
                        {: RESULT = assign.adoptAsFirstChild(new BlueprintTypeNode(id, idxleft)); :}
                        | SIZE ID:id sizeassign:assign
                        {: RESULT = assign.adoptAsFirstChild(new SizeTypeNode(id, idxleft)); :}
                        ;

nodedeclarationopt      ::= channel:channel ID:id channelassignopt:assign
                        {:
                            AbstractNode channelNode = (((NamedIdNode) channel).setId(id));

                            if (assign != null) {
                                AbstractNode assignNode = ((StorageNode) assign).getNodes()[0];
                                AbstractNode chainNode = ((StorageNode) assign).getNodes()[1];

                                assignNode.adoptAsFirstChild(channelNode);

                                if (chainNode != null) {
                                    chainNode.adoptAsFirstChild(assignNode);

                                    RESULT = chainNode;
                                } else {
                                    RESULT = assignNode;
                                }
                            } else {
                                RESULT = channelNode;
                            }
                        :}
                        | mychannel:channel ID:id mychannelassignopt:assign
                        {:
                            AbstractNode channelNode = (((NamedIdNode) channel).setId(id));

                            if (assign != null) {
                                AbstractNode assignNode = ((StorageNode) assign).getNodes()[0];
                                AbstractNode chainNode = ((StorageNode) assign).getNodes()[1];

                                assignNode.adoptAsFirstChild(channelNode);

                                if (chainNode != null) {
                                    chainNode.adoptAsFirstChild(assignNode);

                                    RESULT = chainNode;
                                } else {
                                    RESULT = assignNode;
                                }
                            } else {
                                RESULT = channelNode;
                            }
                        :}
                        | buildtype:type ID:id buildassignopt:assign
                        {:
                            AbstractNode typeNode = (((NamedIdNode) type).setId(id));

                            if (assign != null) {
                                AbstractNode assignNode = ((StorageNode) assign).getNodes()[0];
                                AbstractNode chainNode = ((StorageNode) assign).getNodes()[1];

                                assignNode.adoptAsFirstChild(typeNode);

                                if (chainNode != null) {
                                    chainNode.adoptAsFirstChild(assignNode);

                                    RESULT = chainNode;
                                } else {
                                    RESULT = assignNode;
                                }
                            } else {
                                RESULT = typeNode;
                            }
                        :}
                        ;

nonnodedeclarationopt   ::= BLUEPRINT ID:id blueprintassignopt:assign
                        {:
                            AbstractNode typeNode = new BlueprintTypeNode(id, idxleft);
                            RESULT = (assign != null) ? assign.adoptAsFirstChild(typeNode) : typeNode;
                        :}
                        | SIZE ID:id sizeassignopt:assign
                        {:
                            AbstractNode typeNode = new SizeTypeNode(id, idxleft);
                            RESULT = (assign != null) ? assign.adoptAsFirstChild(typeNode) : typeNode;
                        :}
                        ;

declaration             ::= nodedeclarationopt:decla
                        {:
                            RESULT = decla;
                        :}
                        | nonnodedeclarationopt:decla
                        {:
                            RESULT = decla;
                        :}
                        ;

buildassignopt          ::= buildassign:assign declstoporstay:chain
                        {: RESULT = new StorageNode(assign, chain); :}
                        |
                        ;

blueprintassign         ::= ASSIGN:a DRAW:d idpar:elem
                        {: RESULT = new AssignNode(axleft).adoptChildren(new DrawNode(((NamedIdNode) elem).getId(), dxleft)); :}
                        | ASSIGN:a LPAR DRAW:d idpar:elem RPAR
                        {: RESULT = new AssignNode(axleft).adoptChildren(new DrawNode(((NamedIdNode) elem).getId(), dxleft)); :}
                        | ASSIGN:a idpar:elem
                        {: RESULT = new AssignNode(axleft).adoptChildren(elem); :}
                        ;
sizeassign              ::= ASSIGN:a sizepar:elem
                        {: RESULT = new AssignNode(axleft).adoptChildren(elem); :}
                        | ASSIGN:a idpar:elem
                        {: RESULT = new AssignNode(axleft).adoptChildren(elem); :}
                        ;
channelassign           ::= ASSIGN:a channelelementspar:elem
                        {: RESULT = new AssignNode(axleft).adoptChildren(elem); :}
                        ;
mychannelassign         ::= ASSIGN:a mychannelelementspar:elem
                        {: RESULT = new AssignNode(axleft).adoptChildren(elem); :}
                        ;
buildassign             ::= ASSIGN:a buildelementpar:elem
                        {: RESULT = new AssignNode(axleft).adoptChildren(elem); :}
                        ;
blueprintassignopt      ::= blueprintassign:assign
                        {: RESULT = assign; :}
                        |
                        ;
sizeassignopt           ::= sizeassign:assign
                        {: RESULT = assign; :}
                        |
                        ;
channelassignopt        ::= channelassign:assign declstoporstay:chain
                        {: RESULT = new StorageNode(assign, chain); :}
                        |
                        ;

mychannelassignopt      ::= mychannelassign:assign declstoporstay:chain
                        {: RESULT = new StorageNode(assign, chain); :}
                        |
                        ;

builddeclaration	    ::= BUILD ID:id LPAR elementliststart:elemlist RPAR
                        {:
                            AbstractNode buildNode = new BuildNode(id, idxleft);
                            RESULT = (elemlist != null) ? buildNode.adoptChildren((new ParamsNode(elemlistxleft)).adoptChildren(elemlist)) : buildNode;
                        :}
                        | BUILD LPAR ID:id LPAR elementliststart:elemlist RPAR RPAR
                         {:
                             AbstractNode buildNode = new BuildNode(id, idxleft);
                             RESULT = (elemlist != null) ? buildNode.adoptChildren((new ParamsNode(elemlistxleft)).adoptChildren(elemlist)) : buildNode;
                         :}
                        ;

declstoporstay		    ::= chain:chain
                        {: RESULT = chain; :}
					    |
                        ;
// ELEMENTLIST
elementliststart	    ::= elementpar:elem elementlistext:next
                        {: RESULT = (next != null) ? elem.makeSibling(next) : elem; :}
					    |
                        ;
elementlist		        ::= elementext:elem elementlistext:next
                        {: RESULT = (next != null) ? elem.makeSibling(next) : elem; :}
                        ;
elementlistext	        ::= elementlist:elemlist
                        {: RESULT = elemlist; :}
					    |
                        ;
elementext		        ::= COMMA elementpar:elem
                        {: RESULT = elem; :}
                        ;

// PROCEDURES
procedures		        ::= PROCEDURE:p ID:id LPAR pparams:params RPAR LCURLY content:ct RCURLY procedures:next
                        {:
                            AbstractNode procedure = new ProcedureNode(id, pxleft);
                            if (params != null) {
                                procedure.adoptChildren(new ParamsNode(paramsxleft).adoptChildren(params));
                            }
                            procedure.adoptChildren(ct);

                            RESULT = (next != null) ? procedure.makeSibling(next) : procedure;
                        :}
					    |
                        ;
pparams			        ::= type:type ID:id pextparams:next
                        {:
                            AbstractNode param = ((NamedIdNode) type).setId(id);

                            RESULT = (next != null) ? param.makeSibling(next) : param;
                        :}
					    |
                        ;
pextparams		        ::= COMMA pparams:par
                        {: RESULT = par; :}
					    |
                        ;